name: Rust

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, reopened, ready_for_review, synchronize]
  workflow_dispatch:

# Automatically cancel in-progress actions on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - uses: actions/checkout@v3
      - name: Install protoc compiler (required by tonic, used by otel exporter)
        run: |
          sudo apt-get update
          sudo apt install -y protobuf-compiler libprotobuf-dev
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
      - uses: rui314/setup-mold@v1
      - name: Run tests
        run: cargo test

  clippy:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - uses: actions/checkout@v3
      - name: Install protoc compiler (required by tonic, used by otel exporter)
        run: |
          sudo apt-get update
          sudo apt install -y protobuf-compiler libprotobuf-dev
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
      - run: cargo clippy

  build:
    # runs-on: [self-hosted, linux, ARM64]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-target: [aarch64-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v3

      # - uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.rust-target }}
      #     # 'rust-src' is downloaded by cross for some reason
      #     components: rust-src

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"
      - run: cargo install cross

      - run: echo 20

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.11.2
          endpoint: builders
          install: true

      - name: Build Docker image for cross
        uses: docker/build-push-action@v3
        with:
          context: .
          file: CrossDockerfile
          push: false
          load: true
          tags: cross-docker-image:tag
          build-args: CROSS_BASE_IMAGE=ghcr.io/cross-rs/${{ matrix.rust-target }}:latest
          cache-from: type=gha
          cache-to: type=gha

      - uses: rui314/setup-mold@v1
      - name: Build binary of project using cross
        run: |
          cross build --target=${{ matrix.rust-target }} --release

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: lhr.ocir.io
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            lhr.ocir.io/lrdyqp2xtoja/hello-rust-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build Dockerfile
        id: build-and-push-action-1
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=local,dest=buildkit-docker-cache-location
          platforms: linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Push
        id: build-and-push-action
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=buildkit-docker-cache-location
          cache-to: type=gha
          platforms: linux/arm64

    outputs:
      docker-image-published-digest: ${{ steps.build-and-push-action.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: [build, clippy, test]
    steps:
      - uses: actions/checkout@v3
        with:
          repository: SG60/hello-rust-infrastructure-config
          ref: "main"
          token: ${{ secrets.WRITE_INFRASTRUCTURE_REPOSITORY_PAT }}

      - name: install kustomize
        id: kustomize-installation
        run: |
          curl -sfLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz
          tar xzf ./kustomize.tar.gz
          echo "KUSTOMIZE_COMMAND=$PWD/kustomize" >> $GITHUB_OUTPUT

      - name: Update kustomization for new image
        # in 'prod' folder
        run: |
          cd k8s/prod
          ${{ steps.kustomize-installation.outputs.KUSTOMIZE_COMMAND }} edit set image lhr.ocir.io/lrdyqp2xtoja/hello-rust-backend@${{ needs.build.outputs.docker-image-published-digest }}

      - name: Commit to git
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add k8s/prod/kustomization.yaml
          git commit -m "update docker image digest"
          git push
